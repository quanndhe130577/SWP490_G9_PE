// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TnR_SS.DataEFCore;

namespace TnR_SS.DataEFCore.Migrations
{
    [DbContext(typeof(TnR_SSContext))]
    [Migration("20210720172543_addPurchaseIdToFishtype")]
    partial class addPurchaseIdToFishtype
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.AdvanceSalary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Debt")
                        .HasColumnType("float");

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("AdvanceSalary");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.BaseSalaryEmp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("EmpId");

                    b.ToTable("BaseSalaryEmp");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Basket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("TraderID");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Buyer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("SellerId");

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.CostIncurred", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("CostIncurred");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Drum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<double>("MaxWeight")
                        .HasColumnType("float");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TruckID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("TruckID");

                    b.ToTable("Drum");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("TraderId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.FishType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("MaxWeight")
                        .HasMaxLength(12)
                        .HasColumnType("real");

                    b.Property<float>("MinWeight")
                        .HasMaxLength(12)
                        .HasColumnType("real");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("PurchaseID")
                        .HasColumnType("int");

                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.Property<double>("TransactionPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("PurchaseID");

                    b.HasIndex("TraderID");

                    b.ToTable("FishType");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.HistorySalaryEmp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmpId");

                    b.ToTable("HistorySalaryEmp");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.LK_PurchaseDeatil_Drum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrumID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseDetailID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DrumID");

                    b.HasIndex("PurchaseDetailID");

                    b.ToTable("LK_PurchaseDeatil_Drum");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.OTP", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OTP");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.PondOwner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TraderID");

                    b.ToTable("PondOwner");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Commission")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("PayForPondOwner")
                        .HasColumnType("float");

                    b.Property<double>("PondBackMoney")
                        .HasColumnType("float");

                    b.Property<int>("PondOwnerID")
                        .HasColumnType("int");

                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("isCompleted")
                        .HasColumnType("int");

                    b.Property<bool>("isPaid")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("PondOwnerID");

                    b.HasIndex("TraderID");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.PurchaseDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FishTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("BasketId");

                    b.HasIndex("FishTypeID");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseDetail");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3a9819b1-902c-4506-bafe-442eed9d84d8",
                            CreatedAt = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Chủ bến",
                            Name = "WeightRecorder",
                            NormalizedName = "WEIGHTRECORDER",
                            UpdatedAt = new DateTime(2021, 7, 21, 0, 25, 42, 968, DateTimeKind.Local).AddTicks(4898)
                        },
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ecf7f7f9-6956-4048-831c-21cc7c278f9f",
                            CreatedAt = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Thương lái",
                            Name = "Trader",
                            NormalizedName = "TRADER",
                            UpdatedAt = new DateTime(2021, 7, 21, 0, 25, 42, 970, DateTimeKind.Local).AddTicks(210)
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "8cd43b6b-9185-4df1-959f-6565565b63a9",
                            CreatedAt = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = new DateTime(2021, 7, 21, 0, 25, 42, 970, DateTimeKind.Local).AddTicks(245)
                        });
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.TimeKeeping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<int>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<double>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("WorkDay")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmpId");

                    b.ToTable("TimeKeeping");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.TraderOfWeightRecorder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeightRecorderId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TraderId");

                    b.HasIndex("WeightRecorderId");

                    b.ToTable("TraderOfWeightRecorder");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CommissionUnit")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("WeightRecorderId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TraderId");

                    b.HasIndex("WeightRecorderId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.TransactionDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("FishTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<double>("SellPrice")
                        .HasColumnType("float");

                    b.Property<int>("TransId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("BuyerId");

                    b.HasIndex("FishTypeId");

                    b.HasIndex("TransId");

                    b.ToTable("TransactionDetail");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Truck", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("TraderID");

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.UserInfor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentifyCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Id", "PhoneNumber" }, "UC_PhoneNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ_PhoneNumber")
                        .IsUnique();

                    b.ToTable("UserInfor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.RoleUser", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.RoleUser", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.AdvanceSalary", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Employee", "Employee")
                        .WithMany("AdvanceSalaries")
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.BaseSalaryEmp", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Employee", "Employee")
                        .WithMany("BaseSalaryEmps")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_BaseSalaryEmp_Employee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Basket", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "Trader")
                        .WithMany("Baskets")
                        .HasForeignKey("TraderID")
                        .HasConstraintName("FK_Basket_UserInfor")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Buyer", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "Seller")
                        .WithMany("Buyers")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_Buyer_UserInfor")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.CostIncurred", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "User")
                        .WithMany("CostIncurreds")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CostIncurred_UserInfor")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Drum", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Truck", "Truck")
                        .WithMany("Drums")
                        .HasForeignKey("TruckID")
                        .HasConstraintName("FK_Drum_Truck")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Employee", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "UserInfor")
                        .WithMany("Employees")
                        .HasForeignKey("TraderId")
                        .HasConstraintName("FK_Employee_UserInfor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfor");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.FishType", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Purchase", "Purchase")
                        .WithMany("FishTypes")
                        .HasForeignKey("PurchaseID")
                        .HasConstraintName("FK_FishType_Purchase")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "Trader")
                        .WithMany("FishTypes")
                        .HasForeignKey("TraderID")
                        .HasConstraintName("FK_FishType_UserInfor")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.HistorySalaryEmp", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Employee", "Employee")
                        .WithMany("HistorySalaryEmps")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_HistorySalaryEmp_Employee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.LK_PurchaseDeatil_Drum", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Drum", "Drum")
                        .WithMany("LK_PurchaseDeatil_Drums")
                        .HasForeignKey("DrumID")
                        .HasConstraintName("FK_LKPurchaseDrum_Drum")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("TnR_SS.Domain.Entities.PurchaseDetail", "PurchaseDetail")
                        .WithMany("LK_PurchaseDeatil_Drums")
                        .HasForeignKey("PurchaseDetailID")
                        .HasConstraintName("FK_LKPurchaseDrum_PurchaseDetail")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Drum");

                    b.Navigation("PurchaseDetail");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.PondOwner", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "Trader")
                        .WithMany("PondOwners")
                        .HasForeignKey("TraderID")
                        .HasConstraintName("FK_PondOwner_UserInfor")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.PondOwner", "PondOwner")
                        .WithMany("Purchases")
                        .HasForeignKey("PondOwnerID")
                        .HasConstraintName("FK_Purchase_PondOwner")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "UserInfor")
                        .WithMany("Purchases")
                        .HasForeignKey("TraderID")
                        .HasConstraintName("FK_Purchase_UserInfor")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("PondOwner");

                    b.Navigation("UserInfor");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Basket", "Basket")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("BasketId")
                        .HasConstraintName("FK_PurchaseDetail_Basket")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("TnR_SS.Domain.Entities.FishType", "FishType")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("FishTypeID")
                        .HasConstraintName("FK_PurchaseDetail_FishType")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("TnR_SS.Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_PurchaseDetail_Purchase")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("FishType");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.TimeKeeping", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Employee", "Employee")
                        .WithMany("TimeKeepings")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_TimeKeeping_Employee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.TraderOfWeightRecorder", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "Trader")
                        .WithMany("LK_Trader")
                        .HasForeignKey("TraderId")
                        .HasConstraintName("FK_TraderOfWeightRecorder_Trader")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "WeightRecorder")
                        .WithMany("LK_WeightRecorder")
                        .HasForeignKey("WeightRecorderId")
                        .HasConstraintName("FK_TraderOfWeightRecorder_WeightRecorder")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Trader");

                    b.Navigation("WeightRecorder");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "Trader")
                        .WithMany("TransactionTraders")
                        .HasForeignKey("TraderId")
                        .HasConstraintName("FK_Transaction_UserInfor-Trader")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "WeightRecorder")
                        .WithMany("TransactionWeightRecorders")
                        .HasForeignKey("WeightRecorderId")
                        .HasConstraintName("FK_Transaction_UserInfor-WeightRecorder")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Trader");

                    b.Navigation("WeightRecorder");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.TransactionDetail", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.Buyer", "Buyer")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK_TransactionDetail_Buyer")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("TnR_SS.Domain.Entities.FishType", "FishType")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("FishTypeId")
                        .HasConstraintName("FK_TransactionDetail_FishType")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("TnR_SS.Domain.Entities.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransId")
                        .HasConstraintName("FK_TransactionDetail_Transaction")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("FishType");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Truck", b =>
                {
                    b.HasOne("TnR_SS.Domain.Entities.UserInfor", "Trader")
                        .WithMany("Trucks")
                        .HasForeignKey("TraderID")
                        .HasConstraintName("FK_Truck_UserInfor")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Basket", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Buyer", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Drum", b =>
                {
                    b.Navigation("LK_PurchaseDeatil_Drums");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Employee", b =>
                {
                    b.Navigation("AdvanceSalaries");

                    b.Navigation("BaseSalaryEmps");

                    b.Navigation("HistorySalaryEmps");

                    b.Navigation("TimeKeepings");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.FishType", b =>
                {
                    b.Navigation("PurchaseDetails");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.PondOwner", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("FishTypes");

                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.PurchaseDetail", b =>
                {
                    b.Navigation("LK_PurchaseDeatil_Drums");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.Truck", b =>
                {
                    b.Navigation("Drums");
                });

            modelBuilder.Entity("TnR_SS.Domain.Entities.UserInfor", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Buyers");

                    b.Navigation("CostIncurreds");

                    b.Navigation("Employees");

                    b.Navigation("FishTypes");

                    b.Navigation("LK_Trader");

                    b.Navigation("LK_WeightRecorder");

                    b.Navigation("PondOwners");

                    b.Navigation("Purchases");

                    b.Navigation("TransactionTraders");

                    b.Navigation("TransactionWeightRecorders");

                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
